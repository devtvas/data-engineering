#!/usr/bin/env python3
"""
Script de demonstra√ß√£o completo do pipeline de dados.
Execute este script ap√≥s configurar suas credenciais do Supabase.
"""
import sys
import os
import logging

# Adicionar o diret√≥rio src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Imports after path setup
from src.database.connection import get_db_connection
from src.etl_pipeline import run_etl_pipeline


def check_environment():
    """Verifica se o ambiente est√° configurado corretamente."""
    logger.info("Verificando configura√ß√£o do ambiente...")
    
    try:
        db = get_db_connection()
        if db.test_connection():
            logger.info("‚úÖ Conex√£o com Supabase estabelecida com sucesso!")
            return True
        else:
            logger.error("‚ùå Falha na conex√£o com Supabase")
            return False
    except Exception as e:
        logger.error(f"‚ùå Erro na verifica√ß√£o do ambiente: {e}")
        return False


def main():
    """Fun√ß√£o principal de demonstra√ß√£o."""
    print("=" * 60)
    print("üöÄ DATA ENGINEERING PIPELINE - DEMONSTRA√á√ÉO")
    print("=" * 60)
    
    # Verificar ambiente
    if not check_environment():
        print("\n‚ùå Falha na verifica√ß√£o do ambiente!")
        print("Verifique se:")
        print("1. Voc√™ criou um arquivo .env com suas credenciais do Supabase")
        print("2. As credenciais est√£o corretas")
        print("3. O Supabase est√° acess√≠vel")
        return
    
    # Executar pipeline ETL
    try:
        print("\nüîÑ Executando Pipeline ETL Completo...")
        summary = run_etl_pipeline()
        
        print("\n" + "=" * 60)
        print("‚úÖ PIPELINE EXECUTADO COM SUCESSO!")
        print("=" * 60)
        print(f"üìä Registros de vendas: {summary['sales_records']}")
        print(f"üåç Regi√µes: {summary['regions']}")
        print(f"üì¶ Produtos: {summary['products']}")
        print(f"üí∞ Receita total: ${summary['total_revenue']:.2f}")
        
        print("\nüéØ PR√ìXIMOS PASSOS:")
        print("1. Acesse seu projeto no Supabase")
        print("2. V√° para 'Table Editor' para visualizar os dados")
        print("3. Execute as consultas em sql/consultas_analiticas.sql")
        print("4. Conecte ferramentas de BI como Mode, Power BI ou Tableau")
        
        print("\nüìã TABELAS CRIADAS:")
        print("- sales_data: Dados detalhados de vendas")
        print("- region_aggregates: Agrega√ß√µes por regi√£o")
        print("- product_aggregates: Agrega√ß√µes por produto")
        
        print("\nüìà CONSULTAS SUGERIDAS:")
        print("```sql")
        print("-- Top produtos por receita")
        print("SELECT product_name, total_revenue, total_sales")
        print("FROM product_aggregates")
        print("ORDER BY total_revenue DESC LIMIT 10;")
        print("")
        print("-- Performance por regi√£o")
        print("SELECT region, total_revenue, total_sales")
        print("FROM region_aggregates")
        print("ORDER BY total_revenue DESC;")
        print("```")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante a execu√ß√£o do pipeline: {e}")
        logger.error(f"Pipeline failed: {e}")


if __name__ == "__main__":
    main()
